// prisma/schema.prisma
datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
    provider = "prisma-client-js"
}

enum UserRole {
    ADMIN
    USER
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model User {
    id                    String                 @id @default(cuid())
    name                  String?
    email                 String?                @unique
    image                 String?
    password              String?
    emailVerified         DateTime?
    isTwoFactorEnabled    Boolean                @default(false)
    role                  UserRole               @default(USER)
    accounts              Account[]
    twoFactorConfirmation TwoFactorConfirmation?
}

model VerificationToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model PasswordResetToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model TwoFactorToken {
    id      String   @id @default(cuid())
    email   String
    token   String   @unique
    expires DateTime

    @@unique([email, token])
}

model TwoFactorConfirmation {
    id String @id @default(cuid())

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId])
}

model Category {
    id    String  @id @default(cuid())
    slug  String  @unique
    title String
    img   String?
    Post  Post[]
}

model Post {
    id           String    @id @default(cuid())
    createdAt    DateTime  @default(now())
    slug         String    @unique
    title        String
    description  String
    img          String?
    userId       String
    views        Int       @default(0)
    categoryId   String
    categorySlug String
    category     Category  @relation(fields: [categoryId], references: [id])
    comments     Comment[]
}

model Comment {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    description String
    userId      String
    postSlug    String
    post        Post     @relation(fields: [postSlug], references: [slug])
}
